=>PYTHONTEX#py#default#default#0#code####p1.tex#8#
    from process import Process
    from typing import List
    import operator

    class MQP:
        def __init__(self) -> None:
            self.priority_0: List[Process] = []
            self.priority_1: List[Process] = []
            self.priority_2: List[Process] = []
            self.priority_3: List[Process] = []

        def is_empty(self) -> bool:
            for i in range(4):
                if eval(f"len(self.priority_{i}) > 0"):
                    return False

            return True


        def insert_process(self, process: Process) -> None:
            eval(f"self.priority_{process.priority}.append(process)")


        def remove_process(self, process: Process) -> None:
            eval(f"self.priority_{process.priority}.remove(process)")


        def increase_priority(self, process: Process) -> None:
            process.priority -= 1
            eval(f"self.priority_{process.priority}.append(process)")
            eval(f"self.priority_{process.priority + 1}.remove(process)")


        def find_biggest_cpu_burst(self, priority_list: List[Process]) -> None:
            priority_list.sort(key=operator.attrgetter("CPU_burst"))
            biggest_process: Process = priority_list[-1]
            return biggest_process

        def find_smallest_cpu_burst(self, priority_list: List[Process]) -> None:
            priority_list.sort(key=operator.attrgetter("CPU_burst"))
            biggest_process: Process = priority_list[0]
            return biggest_process


        def change_smallest_priority_process(self) -> None:
            for i in range(3, 0, -1):
                current_level = eval(f"self.priority_{i}")
                if len(current_level) > 0:
                    biggest_process = self.find_biggest_cpu_burst(current_level)
                    self.increase_priority(biggest_process)
                    break


        def increase_wait_time(self, current_process: Process) -> None:
            for priority in range(4):
                for process in eval(f"self.priority_{priority}"):
                    if process != current_process:
                        process.wait_time += 10


        def print_processes(self) -> None:
            print("  +" + "-" * 15 + "+" + "-" * 8 + "+" + "-" * 9 + "+")
            print(f"  |{'process_name':15}|{'priority':8}|{'CPU_burst':9}|")
            print("  +" + "-" * 15 + "+" + "-" * 8 + "+" + "-" * 9 + "+")

            for i in range(4):
                for process in eval(f"self.priority_{i}"):
                    process.print_table()

            print("  +" + "-" * 15 + "+" + "-" * 8 + "+" + "-" * 9 + "+\n")
=>PYTHONTEX#py#default#default#1#code####p1.tex#82#
        class Process:
        def __init__(self, name: str, priority: int, CPU_burst: int) -> None:
            self.name = name
            self.priority = priority
            self.CPU_burst = CPU_burst
            self.wait_time = 0

        def print_table(self) -> None:
            print(f"  |{self.name:15}|{self.priority:8}|{self.CPU_burst:9}|")

        def print_info(self) -> None:
            print("  " + "+" + "-" * 18 + "+" + "-" * 13 + "+")
            print(f"  |{'Process name':18}: {str(self.name):12}|")
            print(f"  |{'Process priority':18}: {str(self.priority):12}|")
            print(f"  |{'Process CPU_burst':18}: {str(self.CPU_burst):12}|")
            print(f"  |{'Process wait_time':18}: {str(self.wait_time):12}|")
            print("  " + "+" + "-" * 18 + "+" + "-" * 13 + "+")
=>PYTHONTEX#py#default#default#2#code####p1.tex#103#
    from time import sleep
    from typing import Tuple, List
    import logging

    from process import Process
    from mqp import MQP
    from scheduler import Scheduler

    logging.basicConfig()
    logger = logging.getLogger("")
    logger.setLevel(logging.INFO)


    def create_process(input: Tuple[str]) -> Process:
            process = Process(input[0], int(input[1]), int(input[2]))
            if process.priority not in range(4):
                Exception("Priority must be between 0 and 3")
                pass

            return process


    def receive_user_input() -> List[tuple]:
        processes_attributes: List[str] = []

        with open("processes.txt", "r") as processes:
            lines = processes.readlines()
            for line in lines:
                line = line.split(", ")
                processes_attributes.append(tuple(line))

            processes.close()

        return processes_attributes


    def receive_processes(processes_attributes: List[tuple]) -> MQP:
        mqp: MQP = MQP()

        for process_attribute in processes_attributes:
            new_process: Process = create_process(process_attribute)
            logger.info(f"New process created: {new_process.name}")

            mqp.insert_process(new_process)

        return mqp



    def select_process(mqp: MQP) -> Process:
        for i in range(4):
            current_priority_level = eval(f"mqp.priority_{i}")
            if current_priority_level:
                chosen_process = mqp.find_smallest_cpu_burst(current_priority_level)

                return chosen_process
        else:
            logger.info("No processes to select")
            return None


    def main():
        processes_input = receive_user_input()
        mqp = receive_processes(processes_input)

        print("This are the processes received: ")
        mqp.print_processes()

        while not mqp.is_empty():
            current_process = select_process(mqp)
            logger.info("Executing the following process:")
            current_process.print_info()
            while current_process.CPU_burst > 0:
                current_process.CPU_burst -= 10
                sleep(10)
                mqp.increase_wait_time(current_process)
                mqp.change_smallest_priority_process()

            logger.info(f"Process finished: {current_process.name}\n")
            mqp.remove_process(current_process)

        logger.info("All processes terminated")

    if __name__ == "__main__":
        main()
=>PYTHONTEX:SETTINGS#
version=0.18
outputdir=pythontex-files-main
workingdir=.
workingdirset=false
gobble=none
rerun=default
hashdependencies=default
makestderr=false
stderrfilename=full
keeptemps=none
pyfuture=default
pyconfuture=none
pygments=true
pygglobal=:GLOBAL||
fvextfile=-1
pyconbanner=none
pyconfilename=stdin
depythontex=false
pygfamily=py|python3|
pygfamily=pycon|pycon|
pygfamily=sympy|python3|
pygfamily=sympycon|pycon|
pygfamily=pylab|python3|
pygfamily=pylabcon|pycon|
